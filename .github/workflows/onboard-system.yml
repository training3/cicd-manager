name: 'onboard-system'
on:
  workflow_dispatch:
    inputs:
      system-name:
        description: 'system-name: Name of the system to be onboarded and managed by the CICD system'
        required: true
      team-name:
        description: 'team-name: Name of the team the system belongs to; determines proper namespace to run in'
        required: true
jobs:
  gather-system-info:
    runs-on: [ubuntu-latest, "${{ github.event.inputs.team-name }}"]
    steps:
    - id: setup-environment
      name: setup-environment
      run: |
        set -x
        echo "SYSTEM_NAME=${{ github.event.inputs.system-name }}" >> ${GITHUB_ENV}
        echo "CICD_REPO_MGR_DIR=${GITHUB_WORKSPACE}/${GITHUB_REPOSITORY}" >> ${GITHUB_ENV}
        echo "SYSTEM_DEFS_DIR=${GITHUB_WORKSPACE}/${GITHUB_REPOSITORY}/.github/system-defs" >> ${GITHUB_ENV}
        set +x
    - id: clone-cicd-manager-repo
      name: clone-cicd-manager-repo
      uses: actions/checkout@v2
      with:
        ref: main
        path: ${{ env.CICD_REPO_MGR_DIR }}
    - id: parse-system-def
      name: parse-system-def
      run: |
        SYSTEM_DEFS_FILE=$(ls ${SYSTEM_DEFS_DIR}/${SYSTEM_NAME}.y*)
        REPO_NAMES=$(yq e '[.organization + "/" + .components[].repo]' "${SYSTEM_DEFS_FILE}" -o json)
        echo "REPO_NAMES: ${REPO_NAMES}"
        echo ::set-output name=component-repos::$(echo ${REPO_NAMES})
    outputs:
      component-repos: ${{ steps.parse-system-def.outputs.component-repos }}
      CICD_REPO_MGR_DIR: ${{ env.CICD_REPO_MGR_DIR }}
  onboard-system:
    runs-on: [build.mdw.nicks.world, "${{ github.event.inputs.team-name }}"]
    needs: gather-system-info
    env:
      CICD_REPO_MGR_DIR: ${{ needs.gather-system-info.outputs.CICD_REPO_MGR_DIR }}
    strategy:
      matrix:
        component-repo: ${{ fromJSON(needs.gather-system-info.outputs.component-repos) }}
    steps:
      - id: setup-environment
        name: setup-environment
        run: |
          set -x
          echo "WORKING_DIR=${GITHUB_WORKSPACE}/${{ matrix.component-repo }}" >> ${GITHUB_ENV}
          echo "PAT_TOKEN=$(cat /var/secrets/PAT_TOKEN)" >> ${GITHUB_ENV}
          set +x
      - id: clone-cicd-manager-repo
        name: clone-cicd-manager-repo
        uses: actions/checkout@v2
        with:
          ref: main
          path: ${{ env.CICD_REPO_MGR_DIR }}
      - id: clone-app-repo
        name: clone-app-repo
        uses: actions/checkout@v2
        with:
          repository: ${{ matrix.component-repo }}
          ref: main
          path: ${{ env.WORKING_DIR }}
          token: ${{ env.PAT_TOKEN }}
      - id: install-github-workflow-directory
        name: install-github-workflow-directory
        env:
          SYSTEM_NAME: ${{ github.event.inputs.system-name }}
          TEAM_NAME: ${{ github.event.inputs.team-name }}
        run: |
          set -ex

          for F_NAME in $(find ${CICD_REPO_MGR_DIR}/.github-app-template/workflows -name "*.yml" -or -name "*.yaml")
          do
              mv ${F_NAME} $(echo ${F_NAME} | sed -e "s/.yml$/-${TEAM_NAME}.yml/" -e "s/.yaml$/-${TEAM_NAME}.yaml/") ;
          done

          find ${CICD_REPO_MGR_DIR}/.github-app-template/workflows/ -type f \( -iname \*.yml -o -iname \*.yaml \) \
            -exec sed -i -e "s/%SYSTEM_NAME%/${SYSTEM_NAME}/g" \
                         -e "s/%TEAM_NAME%/${TEAM_NAME}/g" {} +

          cp -RT ${CICD_REPO_MGR_DIR}/.github-app-template ${WORKING_DIR}/.github

          git -C ${WORKING_DIR} add -u
          if [[ ! -z "$(git -C ${WORKING_DIR} status --porcelain)" ]]
          then
              git -C ${WORKING_DIR} config user.email ${cicd-team@my-org.com}
              git -C ${WORKING_DIR} config user.name ${GITHUB_ACTOR}
              git -C ${WORKING_DIR} add -A
              git -C ${WORKING_DIR} commit -am 'installing latest cicd-manager GitHub Action Workflow(s)'
              git -C ${WORKING_DIR} push
          else
              echo "${{ matrix.component-repo }} is unchanged.  Skipping..."
          fi
          set +ex
